Brute force
Time->O(n^2)
space->O(1)
class Solution {
    public int singleNumber(int[] nums) {
        int n=nums.length;
        for(int i=0;i<n;i++){
            int num=nums[i];
            int count=0;
            for(int j=0;j<n;j++){
                if(nums[j]==num){
                    count++;
                }
            }
            if(count==1){
                return num;
            }
        }
        return 0;       
    }
}

better solution using hashmap

Time->O(nlogm)+O(n/2+1)  where m=n/2+1
space->O(n/2+1)
class Solution {
    public int singleNumber(int[] nums) {
        int n=nums.length;
        int max=0;
        HashMap<Integer, Integer> mpp = new HashMap<>();
        for (int i = 0; i < n; i++) {
            int value = mpp.getOrDefault(nums[i], 0);
            mpp.put(nums[i], value + 1);
        }
        for (Map.Entry<Integer, Integer> it : mpp.entrySet()) {
            if (it.getValue() == 1) {
                return it.getKey();
            }
        }
        return -1;
    }
}


optimized solution using xor

Time->O(n)
Space->O(1)

class Solution {
    public int singleNumber(int[] nums) {
        int n=nums.length;
        int xor=0;
        for(int i=0;i<n;i++){
            xor=xor^nums[i];
        }
        return xor;
    }
}
