Brute force
Time comp->O(N**2)
Space comp->O(1)

public class tUf {
    public static int majorityElement(int []v) {
        //size of the given array:
        int n = v.length;
        for (int i = 0; i < n; i++) {
            //selected element is v[i]
            int cnt = 0;
            for (int j = 0; j < n; j++) {
                // counting the frequency of v[i]
                if (v[j] == v[i]) {
                    cnt++;
                }
            }
            // check if frquency is greater than n/2:
            if (cnt > (n / 2))
                return v[i];
        }
        return -1;
    }

Using Hashing
Time comp-> O(N*logN) + O(N) ordered map
            O(N)+O(N)....unordered map best n average case
            O(N**2)......unordered map worst case
Space comp->O(N)
class Solution {
    public int majorityElement(int[] nums) {
        HashMap<Integer,Integer> map=new HashMap<Integer,Integer>();
        for(int i=0;i<nums.length;i++){
            if(map.containsKey(nums[i])){
                map.put(nums[i],(map.get(nums[i]))+1);
            }
            else{
                map.put(nums[i],1);
            }
        }
        for(Map.Entry<Integer,Integer> entry:map.entrySet()){
            if(entry.getValue()>(nums.length/2)){
                return entry.getKey();
            }
        }
        return -1;        
    }
}

