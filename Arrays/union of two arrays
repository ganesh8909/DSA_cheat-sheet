using TreeSet->arraylist(lil comp)

Time comp->O(nlogn + mlogm + (n+m))
space comp->O(n + m)
class Solution {
    public static ArrayList<Integer> findUnion(int a[], int b[]) {
        Set<Integer> list = new TreeSet<Integer>();
        for(int i=0;i<a.length;i++){       //O(NlogN)
            list.add(a[i]);
        }
        for(int i=0;i<b.length;i++){       //O(MlogM)
            list.add(b[i]);
        }
        ArrayList<Integer> list2=new ArrayList<Integer>(list);      //O(K) this k will be atmost (N+M) elements
        return list2;
    }
}

Time Complexity
1. Iterating over array a takes O(nlogn) time, where n is the length of array a.
2. Iterating over array b takes O(mlogm) time, where m is the length of array b.
3. Adding elements to the LinkedHashSet takes O(1) average time, since it uses a hash table internally.
4. Converting the LinkedHashSet to an ArrayList takes O(k) time, where k is the number of unique elements in the set.

Since the iterations over arrays a and b are done sequentially, the total time complexity is:
O(nlogn) + O(mlogm) + O(k) = O(nlogn + mlogm + (n+m))

However, since k is the number of unique elements, which is at most n + m, we can simplify the time complexity to:
O(n + m)

Space Complexity
1. The LinkedHashSet uses O(k) space to store the unique elements, where k is the number of unique elements.atmost (N+M) unique elements
2. The ArrayList uses O(n+m) space to store the result.

Since the maximum space used is O(k), and k is at most n + m, the space complexity is:
O(n + m)

TWO POINTER APPROACH
Time comp->O(n+m)
Space comp->O(n+m)...This is not extra space taken,this is the space taken in order to return the elements..

class Solution {
    public static ArrayList<Integer> findUnion(int a[], int b[]) {
        ArrayList<Integer> array=new ArrayList<Integer>();
        int n=a.length;
        int m=b.length;
        int i=0;
        int j=0;
        while(i<n && j<m){
            if(a[i]<=b[j]){
                if(array.size()==0 || !array.contains(a[i])){
                    array.add(a[i]);
                }
                i++;
            }
            else{
                if(array.size()==0 || !array.contains(b[j])){
                    array.add(b[j]);
                }
                j++;
            }
        }
        while(j<m){
            if(array.size()==0 || !array.contains(b[j])){
                array.add(b[j]);
            }
            j++;
        }
        while(i<n){
            if(array.size()==0 || !array.contains(a[i])){
                array.add(a[i]);
            }
            i++;
        }
        return array;        
    }            
}


