//Brute force---o(n)+nlog(n)
class Solution {
    public int getSecondLargest(int[] arr) {
        int n=arr.length;
        Arrays.sort(arr);           //o(nlog(n))
        int lar=arr[n-1];
        for(int i=n-2;i>-1;i--){    //o(n)
            if(arr[i]!=lar){
                return arr[i];
            }
        }
        return -1;        
    }
}

//better solution--o(2n)
lass Solution {
    public int getSecondLargest(int[] arr) {
        int lar=0;
        int seclar=-1;
        for(int i=0;i<arr.length;i++){         //o(n)
            if(arr[i]>lar){
                lar=arr[i];
            }
        }
        for(int i=0;i<arr.length;i++){         //o(n)
            if(arr[i]>seclar && arr[i]!=lar){
                seclar=arr[i];
            }
        }
        return seclar;
    }
}

//optimized solution--o(n)
class Solution {
    public int getSecondLargest(int[] arr) {
        int lar=arr[0];
        int seclar=-1;
        for(int i=1;i<arr.length;i++){    //o(n)
            if(arr[i]>lar){
                seclar=lar;
                lar=arr[i];
            }
            else if(arr[i]<lar && arr[i]>seclar){
                seclar=arr[i];
                
            }
        }
        return seclar;

    }
}
