Time comp->O(N)+O(N)=O(2N)=O(N)
Space comp->O(N)

class Solution {
    public int[] rearrangeArray(int[] nums) {
        int n=nums.length;
        int[] pos=new int[n/2];
        int[] neg=new int[n/2];
        int j=0,k=0;
        for(int i=0;i<n;i++){
            if(nums[i]>0){
                pos[j++]=nums[i];
            }
            else{
                neg[k++]=nums[i];
            }
        }
        for(int i=0;i<n;i++){
            if(i%2==0){
                nums[i]=pos[i/2];
            }
            else{
                nums[i]=neg[i/2];
            }
        }
        return nums;    
    }
}



Bit optimized

Time comp->O(N)
Space comp->O(N)

class Solution {
    public int[] rearrangeArray(int[] nums) {
        int n=nums.length;
        int pi=0,ni=1;
        int[] ans = new int[n];
        for(int i=0;i<n;i++){
            if(nums[i]>0){
                ans[pi]=nums[i];
                pi+=2;
            }
            else{
                ans[ni]=nums[i];
                ni+=2;
            }
        }
        return ans;    
    }
}
